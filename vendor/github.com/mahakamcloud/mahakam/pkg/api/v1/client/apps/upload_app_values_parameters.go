// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadAppValuesParams creates a new UploadAppValuesParams object
// with the default values initialized.
func NewUploadAppValuesParams() *UploadAppValuesParams {
	var ()
	return &UploadAppValuesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadAppValuesParamsWithTimeout creates a new UploadAppValuesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadAppValuesParamsWithTimeout(timeout time.Duration) *UploadAppValuesParams {
	var ()
	return &UploadAppValuesParams{

		timeout: timeout,
	}
}

// NewUploadAppValuesParamsWithContext creates a new UploadAppValuesParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadAppValuesParamsWithContext(ctx context.Context) *UploadAppValuesParams {
	var ()
	return &UploadAppValuesParams{

		Context: ctx,
	}
}

// NewUploadAppValuesParamsWithHTTPClient creates a new UploadAppValuesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadAppValuesParamsWithHTTPClient(client *http.Client) *UploadAppValuesParams {
	var ()
	return &UploadAppValuesParams{
		HTTPClient: client,
	}
}

/*UploadAppValuesParams contains all the parameters to send to the API endpoint
for the upload app values operation typically these are written to a http.Request
*/
type UploadAppValuesParams struct {

	/*AppName
	  App name

	*/
	AppName *string
	/*ClusterName
	  Cluster name to deploy app

	*/
	ClusterName *string
	/*Owner
	  Owner of the app

	*/
	Owner *string
	/*Values
	  App values.yaml to upload

	*/
	Values runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload app values params
func (o *UploadAppValuesParams) WithTimeout(timeout time.Duration) *UploadAppValuesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload app values params
func (o *UploadAppValuesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload app values params
func (o *UploadAppValuesParams) WithContext(ctx context.Context) *UploadAppValuesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload app values params
func (o *UploadAppValuesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload app values params
func (o *UploadAppValuesParams) WithHTTPClient(client *http.Client) *UploadAppValuesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload app values params
func (o *UploadAppValuesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppName adds the appName to the upload app values params
func (o *UploadAppValuesParams) WithAppName(appName *string) *UploadAppValuesParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the upload app values params
func (o *UploadAppValuesParams) SetAppName(appName *string) {
	o.AppName = appName
}

// WithClusterName adds the clusterName to the upload app values params
func (o *UploadAppValuesParams) WithClusterName(clusterName *string) *UploadAppValuesParams {
	o.SetClusterName(clusterName)
	return o
}

// SetClusterName adds the clusterName to the upload app values params
func (o *UploadAppValuesParams) SetClusterName(clusterName *string) {
	o.ClusterName = clusterName
}

// WithOwner adds the owner to the upload app values params
func (o *UploadAppValuesParams) WithOwner(owner *string) *UploadAppValuesParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the upload app values params
func (o *UploadAppValuesParams) SetOwner(owner *string) {
	o.Owner = owner
}

// WithValues adds the values to the upload app values params
func (o *UploadAppValuesParams) WithValues(values runtime.NamedReadCloser) *UploadAppValuesParams {
	o.SetValues(values)
	return o
}

// SetValues adds the values to the upload app values params
func (o *UploadAppValuesParams) SetValues(values runtime.NamedReadCloser) {
	o.Values = values
}

// WriteToRequest writes these params to a swagger request
func (o *UploadAppValuesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppName != nil {

		// form param appName
		var frAppName string
		if o.AppName != nil {
			frAppName = *o.AppName
		}
		fAppName := frAppName
		if fAppName != "" {
			if err := r.SetFormParam("appName", fAppName); err != nil {
				return err
			}
		}

	}

	if o.ClusterName != nil {

		// form param clusterName
		var frClusterName string
		if o.ClusterName != nil {
			frClusterName = *o.ClusterName
		}
		fClusterName := frClusterName
		if fClusterName != "" {
			if err := r.SetFormParam("clusterName", fClusterName); err != nil {
				return err
			}
		}

	}

	if o.Owner != nil {

		// form param owner
		var frOwner string
		if o.Owner != nil {
			frOwner = *o.Owner
		}
		fOwner := frOwner
		if fOwner != "" {
			if err := r.SetFormParam("owner", fOwner); err != nil {
				return err
			}
		}

	}

	if o.Values != nil {

		if o.Values != nil {

			// form file param values
			if err := r.SetFileParam("values", o.Values); err != nil {
				return err
			}

		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
