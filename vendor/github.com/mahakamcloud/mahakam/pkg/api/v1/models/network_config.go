// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkConfig network config
// swagger:model networkConfig
type NetworkConfig struct {

	// fqdn
	Fqdn string `json:"fqdn,omitempty"`

	// gateway IP
	// Format: ipv4
	GatewayIP strfmt.IPv4 `json:"gatewayIP,omitempty"`

	// ip
	// Format: ipv4
	IP strfmt.IPv4 `json:"ip,omitempty"`

	// ip mask
	IPMask string `json:"ipMask,omitempty"`

	// mac
	// Format: mac
	Mac strfmt.MAC `json:"mac,omitempty"`

	// nameserver IP
	// Format: ipv4
	NameserverIP strfmt.IPv4 `json:"nameserverIP,omitempty"`
}

// Validate validates this network config
func (m *NetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGatewayIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameserverIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConfig) validateGatewayIP(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewayIP) { // not required
		return nil
	}

	if err := validate.FormatOf("gatewayIP", "body", "ipv4", m.GatewayIP.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkConfig) validateIP(formats strfmt.Registry) error {

	if swag.IsZero(m.IP) { // not required
		return nil
	}

	if err := validate.FormatOf("ip", "body", "ipv4", m.IP.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkConfig) validateMac(formats strfmt.Registry) error {

	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.FormatOf("mac", "body", "mac", m.Mac.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkConfig) validateNameserverIP(formats strfmt.Registry) error {

	if swag.IsZero(m.NameserverIP) { // not required
		return nil
	}

	if err := validate.FormatOf("nameserverIP", "body", "ipv4", m.NameserverIP.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkConfig) UnmarshalBinary(b []byte) error {
	var res NetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
