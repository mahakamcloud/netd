// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/mahakamcloud/mahakam/pkg/api/v1/models"
)

// AllocateOrReleaseFromIPPoolReader is a Reader for the AllocateOrReleaseFromIPPool structure.
type AllocateOrReleaseFromIPPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllocateOrReleaseFromIPPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAllocateOrReleaseFromIPPoolCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewAllocateOrReleaseFromIPPoolDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAllocateOrReleaseFromIPPoolCreated creates a AllocateOrReleaseFromIPPoolCreated with default headers values
func NewAllocateOrReleaseFromIPPoolCreated() *AllocateOrReleaseFromIPPoolCreated {
	return &AllocateOrReleaseFromIPPoolCreated{}
}

/*AllocateOrReleaseFromIPPoolCreated handles this case with default header values.

Allocated new IP from IP pool
*/
type AllocateOrReleaseFromIPPoolCreated struct {
	Payload *models.AllocatedIPPool
}

func (o *AllocateOrReleaseFromIPPoolCreated) Error() string {
	return fmt.Sprintf("[POST /networks/pools/ipPools/{poolId}][%d] allocateOrReleaseFromIpPoolCreated  %+v", 201, o.Payload)
}

func (o *AllocateOrReleaseFromIPPoolCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AllocatedIPPool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllocateOrReleaseFromIPPoolDefault creates a AllocateOrReleaseFromIPPoolDefault with default headers values
func NewAllocateOrReleaseFromIPPoolDefault(code int) *AllocateOrReleaseFromIPPoolDefault {
	return &AllocateOrReleaseFromIPPoolDefault{
		_statusCode: code,
	}
}

/*AllocateOrReleaseFromIPPoolDefault handles this case with default header values.

generic error response
*/
type AllocateOrReleaseFromIPPoolDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the allocate or release from Ip pool default response
func (o *AllocateOrReleaseFromIPPoolDefault) Code() int {
	return o._statusCode
}

func (o *AllocateOrReleaseFromIPPoolDefault) Error() string {
	return fmt.Sprintf("[POST /networks/pools/ipPools/{poolId}][%d] allocateOrReleaseFromIpPool default  %+v", o._statusCode, o.Payload)
}

func (o *AllocateOrReleaseFromIPPoolDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
